{"meta":{"title":"samhaus的博客","subtitle":"愿荒诞流年，执墨一世晾黑白","description":"就职于聚光科技(杭州)。擅长各项前端技能，深入研究Android端与混合前端研发。灵魂兼职项目经理、需求分析师、产品经理等。此为博客一枚。","author":"samhaus","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"RAP简介教程&常用规则","slug":"RAP简介教程&常用规则","date":"2019-02-22T09:21:21.000Z","updated":"2019-02-25T03:11:26.316Z","comments":true,"path":"2019/02/22/RAP简介教程&常用规则/","link":"","permalink":"http://yoursite.com/2019/02/22/RAP简介教程&常用规则/","excerpt":"","text":"上篇文章浅谈了mock数据的工具对比，在实际使用过程中，需要mock的数据包含各种语法规则、数据规律等等，最完善的规则建议还是参考MOCK.js教程，但是，这里就需要了解下RAP在使用时常用的一些写法了。 首先我们先看下RAP的整个页面： 日常使用主要涉及几个模块： 接口简介 主要是接口地址、接口类型等等 请求参数 可以分为三类： 1、headers:一般头部放置验证参数等，例如cookie、token等 2、Query Params:常用是get方式请求，用于校验请求参数 3、Body Params：常用是post方式请求，用于校验请求参数 响应参数接口请求成功以后的返回参数 而参数一般有两种方式导入： 单个参数导入：主要是名称、类型、生成规则、初始值、简介这几个，这里的生成规则就需要一些按照一些特定规则来了。 还有一种是直接导入一个Json字符串，系统会直接帮我们转化成相对应的参数格式： { \"code\": 200, \"data\": { \"entries\": [ { \"name\": \"上海市\", \"id\": 2 }, { \"name\": \"闵行区\", \"id\": 3 }, { \"name\": \"长宁区\", \"id\": 6 } ] } } 这样就可以直接生成一个返回模板： 但是此时和我们要使用的参数可能还是有出入，那么我们就可以直接在响应内容的表格内作相对应的修改了，例如修改对应参数生成规则、初始值等，去自定义参数生成你想要的值。写完记得右上角的保存哦。 (重要)这里整理了常用参数的规则写法(骚操作)，感兴趣可以收藏当做便利贴： 官方demo在线实例已经有一些各种类型的示例，我们这里做一些常用的补充： 类型 写法 含义 String 1-10 生成一个长度为1-10位的字符串（定义初始值后生成的字符串为多次重复该初始值） String @order(上海市,长宁区,闵行区,静安区,嘉定区) 从数组里随机一个值出来，一般是按照数组顺序排序列出 String @datetime(“yyyy-MM-dd”) 按照一定格式生成的时间字符串，符合‘yyyyMMdd’的生成规则 String @now 当前时间 String @province 随机一个国内省、地区、直辖市名称 String @city 随机一个国内地级市名称 String @county 随机一个县的名称 String @color() 随机生成一种颜色（例如#FF00FF） Number @range(2,10) 生成一个从2到10的正序数组 Number @natural(10000, 99999) 随机生成一个自然数（比如生成一个ID就可以用），括号里面是它的限制条件 RegExp /\\d{5,10}-/ 按照一定正则规则校验出来的数据 这些规则都可以在MOCK.js里面找到相对应你想要的，只是在RAP里面你需要按照他的规则改写，比如在MOCK.js里Random.rgb()是随机生成一种rgb颜色色值，而在RAP里面写法是@rgb ，大家有兴趣的可以自行去尝试一下。","categories":[],"tags":[]},{"title":"浅谈前端MOCK数据工具比较","slug":"浅谈前端MOCK数据工具比较","date":"2019-02-22T09:21:21.000Z","updated":"2019-02-25T03:07:35.446Z","comments":true,"path":"2019/02/22/浅谈前端MOCK数据工具比较/","link":"","permalink":"http://yoursite.com/2019/02/22/浅谈前端MOCK数据工具比较/","excerpt":"","text":"前言： 目前的前后端开发中比较常采用前后端分离的做法，而前后端分离在沟通和联调方面又时长会有障碍，比如前后端进度不一、前后端联调时间较短、前后端沟通麻烦（跨地区、跨时区等等）。目前为了解决这个问题，最常用的就是通过Mock数据的方式来解决。而我们需要的是一个Web可视化接口管理工具，开源免费，接口稳定、数据自动生成，有权限管理，最好能支持自动化测试、动态切换环境等。 我们主要来对比下阿里妈妈的 RAP（最新升级版已经到RAP2）和丁香园的 api-mocker版本，两家都有线上版本和线下部署版本. 线上版本体验戳我RAP2&amp;&amp;api-mocker。 特性 RAP2（阿里） api-mocker（丁香园） 在线使用 服务稳定，适合企业、团队合作，可以直接在线使用（RAP2） 线上接口不稳定，且不具保密性，不建议直接使用（好像服务又崩了QAQ） 应用范围 知名度广 知名度较小 页面友好 友好程度一般 友好性较好 主要搭建环境 Node.js 8.9.4+、MySQL 5.7+、Redis 4.0+ MongoDB+vue+Nginx（或tomcat）等 拓展语法 支持Mock.js写法，可以随机mock假数据 支持Mock.js写法，可以随机mock假数据 接口名 可自定义接口地址后缀名 随机生成后缀 代理 貌似没有 可代理转发线上线下地址，便于不同环境切换 插件拓展 支持Kissy和jQuery插件 貌似没有 权限分配 权限管理能力强大 没有团队管理，仅有接口读写权限管理 接口文档 貌似没有 自动生成接口文档、可订阅接口变更邮件提醒 接口状态模拟 生成接口时设定requestStatus 模拟切换不同requestStatus(同一接口不同状态切换)、模拟接口延迟等 适用场景 适合企业、大团队合作 适合个人、小团队使用 从上面的对比来看，在mock数据方面，似乎RAP2更侧重mock数据专业能力方面，专业性非常扎实，而api-mocker则是在RAP基础上进一步开发的工具，它更倾向于功能拓展，对用户更加友好，例如不同环境切换、邮件订阅等，同时也考虑到了不同网络使用场景，例如接口延迟，requestStatus等。 这里我比较倾向于采用阿里的技术方案，主要是考虑到接口后缀名自定义和权限管理这块，当然了我也很喜欢api-mocker的各种人性化方案，要是能跟得上阿里更新的脚步，把这几点不足弥补了就好了。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-02-22T08:42:15.933Z","updated":"2019-02-22T08:42:15.933Z","comments":true,"path":"2019/02/22/hello-world/","link":"","permalink":"http://yoursite.com/2019/02/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}